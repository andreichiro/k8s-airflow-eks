image:
  repository: "888508661428.dkr.ecr.us-east-2.amazonaws.com/starburst-hive"
  tag: "3.1.3-e.6"
  pullPolicy: "IfNotPresent"
## registryCredentials set access to container images
registryCredentials:
  enabled: false
  # Replace this with Docker Registry that you use
  registry:
  username:
  password:
# Instead of setting registryCredentials you can pass list of secrets, in format:
# imagePullSecrets:
#  - name: secret1
#  - name: secret2
# Select one method of selecting registryCredentials otherwise you'll receive an error
imagePullSecrets:
# ------------------------------------------------------------------------------
# HMS Additional Volumes mount. General purpose.
# Provided as array
#  - path: <<container mount path>>
#    subPath: <<optional key in ConfigMap or Secret>>
#    volume: {}
#
#  Volume definition
#  https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes
#  without name parameter.
#
# If you specify 'path' only, a directory named 'path' is created. When mounting ConfigMap
# or Secret, files are created in this directory for each key.
#
# If you specify 'subPath', specific key named 'subPath' from ConfigMap or Secret is mounted as
# a file with name provided by 'path'.
#
# E.g. for K8S emptyDir volume
# additionalVolumes:
#   - path: /mnt/InContainer
#     volume:
#       emptyDir: {}
#
# ------------------------------------------------------------------------------
additionalVolumes: []
# ------------------------------------------------------------------------------
# Hive metastore service expose.
#
# Service running on port 9083 is a TCP service and as such is not eligible for K8s Ingress.
# Only K8s Services are supported by this chart here.
# Some Ingress Controllers supports UDP/TCP services through ConfigMaps.
# Ex: https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/
#
# ------------------------------------------------------------------------------
expose:
  type: "clusterIp"
  clusterIp:
    name: "hive"
    ports:
      http:
        name: http
        port: 9083
  nodePort:
    name: "hive"
    ports:
      http:
        port: 9083
        nodePort: 30083
    extraLabels: {}
  loadBalancer:
    name: "hive"
    IP: ""
    ports:
      http:
        port: 9083
    annotations: {}
    sourceRanges: []
database:
  # type is internal | external
  type: internal
  internal:
    image:
      repository: "library/postgres"
      tag: "10.6"
      pullPolicy: "IfNotPresent"
    volume:
      # use one of:
      # - existingVolumeClaim to specify existing PVC
      # - persistentVolumeClaim to specify spec for new PVC
      # - other volume type inline configuration, e.g. emptyDir
      # Examples:
      # existingVolumeClaim: "my_claim"
      # persistentVolumeClaim:
      #  storageClassName:
      #  accessModes:
      #    - ReadWriteOnce
      #  resources:
      #    requests:
      #      storage: "2Gi"
      emptyDir: {}
    resources:
      requests:
        memory: "1Gi"
        cpu: 2
      limits:
        memory: "1Gi"
        cpu: 2
    driver: "org.postgresql.Driver"
    port: 5432
    databaseName: "hive"
    databaseUser: "hive"
    databasePassword: "HivePass1234"
    # Allows to propagate environment variables from different sources like accordingly to K8S schema
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envfromsource-v1-core
    # e.g.
    # envFrom:
    #   - secretRef:
    #       name: <<secret_name>>
    envFrom: []
    # YAML sequence of mappings with two keys "name" and "value" representing environment variables for an internal DB
    # container. More on https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    env: []
  # for type external
  external:
    # if set to true and the env var HIVE_METASTORE_PASSWORD is set via .Values.envFrom then it will take precedence
    # over the password value in this section below
    setPasswordsViaEnvFrom: false
    # docker container supported drivers: com.mysql.jdbc.Driver or org.postgresql.Driver
    jdbcUrl:
    driver:
    user:
    password:
hiveMetastoreWarehouseDir:
hdfs:
  hadoopUserName:
objectStorage:
  # AWS
  awsS3:
    region:
    endpoint:
    accessKey:
    secretKey:
    pathStyleAccess: false
  # Google
  gs:
    # existing secret containing key.json key
    cloudKeyFileSecret:
  azure:
    # Azure Blob Filesystem
    abfs:
      # type is accessKey | oauth
      authType: "accessKey"
      accessKey:
        storageAccount:
        accessKey:
      oauth:
        clientId:
        secret:
        endpoint:
    # Windows Azure Storage Blob
    wasb:
      storageAccount:
      accessKey:
  # Azure Data Lake
  adl:
    oauth2:
      clientId:
      credential:
      refreshUrl:
# Corresponds to parameter hive.security.metastore.authorization.auth.reads
hiveMetastoreStorageAuthorization: true
heapSizePercentage: 85
resources:
  requests:
    memory: "1Gi"
    cpu: 1
  limits:
    memory: "1Gi"
    cpu: 1
# Allows to propagate environment variables from different sources like accordingly to K8S schema
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envfromsource-v1-core
# e.g.
# envFrom:
#   - secretRef:
#       name: <<secret_name>>
envFrom: []
# YAML sequence of mappings with two keys "name" and "value" representing environment variables for an internal DB
# container. More on https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: []
# MinIO object storage and others may require TLS 1.3 and additional cipher suites for a secure connection.
# On OpenJDK 8 this can be provided by OpenJSSE. To enable this extra provider set the USE_OPENJSSE environment variable
#  - name: USE_OPENJSSE
#    value: "true"

# ------------------------------------------------------------------------------
# Optional startup script as inline yaml string. # The default container command is passed as the first argument.
# The init script content must end with `exec "$@"`.
#
# E.g.
# initFile: |
#   #!/bin/bash
#   echo "Starting..."
#   exec "$@"
# ------------------------------------------------------------------------------
initFile: ""
extraArguments: []
## Additional annotations for deployment
deploymentAnnotations: {}
## Additional annotations for pod
podAnnotations: {}
nodeSelector: {}
affinity: {}
tolerations: []
# Make security context configurable for non-root containers
securityContext: {}
# Labels to apply to all resources
commonLabels: {}
#  environment: dev
#  myLabel: labelValue
## Service account for Hive pod
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
#serviceAccountName:
